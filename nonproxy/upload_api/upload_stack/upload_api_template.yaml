AWSTemplateFormatVersion : "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dakobed Rest API Service

Parameters:
  Region:
    Type: String
    Default: us-west-2
  QueueName:
    Type: String
    Default: LibrosaTransformsQueue
  BucketName:
    Type: String
    Default: nonproxy-sqs-transform-bucket
  UserUploadTableName:
    Type: String
    Default: UserUploadTable
  DynamoEndpoint:
    Type: String
    Default: cloud
    AllowedValues:
      - http://dynamo-local:8000
      - cloud
    Description: http://dynamo-local:8000, cloud


Resources:
  UploadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UploadApi
      StageName: Prod
      DefinitionUri: ./swagger.yaml

  PresignedPostUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: PresignedPostUploadFunction
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - SQSSendMessagePolicy:
            QueueName: InitiateTransformsQueue
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: Users
      CodeUri: handlers/signedURL
      Handler: app.lambda_handler
      Runtime: python3.7

      Layers:
        - !ImportValue upload-authorization-layer-stack:AuthorizationLayer

      Environment:
        Variables:
          UploadBucket: !Ref BucketName
          userpool_id: !ImportValue upload-nonproxy-user-stack:UserPool
          app_client_id: !ImportValue upload-nonproxy-user-stack:UserPoolClient
          region: !Ref Region
          user_table: Users


      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref UploadApi
            Path: /signedURL
            Method: POST

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - UploadApi
    - PresignedPostUploadFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PresignedPostUploadFunction
      Principal: apigateway.amazonaws.com


  UserUploadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref UserUploadTableName
        AttributeDefinitions:
          -
            AttributeName: "user"
            AttributeType: "S"
          -
            AttributeName: "filename"
            AttributeType: "S"

        KeySchema:
          -
            AttributeName: "user"
            KeyType: "HASH"
          -
            AttributeName: "filename"
            KeyType: "RANGE"

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt VerifyUploadFunction.Arn
#        QueueConfigurations:
#          - Event: s3:ObjectCreated:Post
#            Queue: !GetAtt TransformQueue.Arn
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
          AllowedOrigins:
            - "*"

  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: TransformQueue
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: SQS:SendMessage
            Resource: "*"
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      Queues:
        - !Ref TransformQueue

  VerifyUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      FunctionName: VerifyUploadFunction
#      Policies:
#        - SQSSendMessagePolicy:
#            QueueName: InitiateTransformsQueue
#        - AWSLambdaBasicExecutionRole

      CodeUri: handlers/verify_upload
      Handler: app.lambda_handler
      Environment:
        Variables:
          dynamo_endpoint: !Ref DynamoEndpoint
          user_upload_table: !Ref UserUploadTableName
          user_table: Uses

      Runtime: python3.7
      Role: !GetAtt ProcessingLambdaExecutionRole.Arn

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref VerifyUploadFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId


  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: dynamo_user_table_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:Query
#              Resource: arn:aws:dynamodb:us-west-2:710339184759:table/Users
              Resource: arn:aws:dynamodb:us-west-2:710339184759:table/Users/index/*

        - PolicyName: dynamo_upload_table_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt UserUploadTable.Arn


        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:DeleteObject
              Resource:  !Sub 'arn:aws:s3:::${BucketName}/*'

Outputs:
  UploadApi:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Sub "https://${UploadApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/signedURL"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UploadApi' ] ]

  S3UploadBucket:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Ref BucketName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'S3UploadBucket' ] ]

  UserUploadTable:
    Description: "API Gateway endpoint URL for Prod stage upload API"
    Value: !Ref BucketName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserUploadTable' ] ]